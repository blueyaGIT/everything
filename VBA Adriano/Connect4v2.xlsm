Option Explicit

Dim board(1 To 8, 1 To 8) As String
Dim currentPlayer As String

Sub InitializeGame()
    Dim i As Integer, j As Integer
    currentPlayer = "R" ' R for Red, Y for Yellow
    For i = 1 To 8
        For j = 1 To 8
            board(i, j) = ""
            With Cells(i + 1, j)
                .Interior.ColorIndex = xlNone
                .Value = ""
            End With
        Next j
    Next i
    MsgBox "Game Initialized! Red goes first."
End Sub

Sub DropDisc(column As Integer)
    Dim row As Integer
    row = GetEmptyRow(column)
    If row = 0 Then
        MsgBox "Column is full! Choose another column."
        Exit Sub
    End If
    
    board(row, column) = currentPlayer
    With Cells(row + 1, column)
        If currentPlayer = "R" Then
            .Interior.Color = RGB(255, 0, 0) ' Red
        Else
            .Interior.Color = RGB(255, 255, 0) ' Yellow
        End If
    End With
    
    If CheckForWin(row, column) Then
        MsgBox "Player " & board(row, column) & " wins!"
        InitializeGame
        Exit Sub
    ElseIf IsBoardFull Then
        MsgBox "It's a draw!"
        InitializeGame
        Exit Sub
    End If
    
    If currentPlayer = "R" Then
        currentPlayer = "Y"
        BotMove 1 ' Example: Bot at difficulty level 1
    Else
        currentPlayer = "R"
    End If
End Sub

Function GetEmptyRow(column As Integer) As Integer
    Dim row As Integer
    For row = 8 To 1 Step -1
        If board(row, column) = "" Then
            GetEmptyRow = row
            Exit Function
        End If
    Next row
    GetEmptyRow = 0 ' Column is full
End Function

Function CheckForWin(row As Integer, column As Integer) As Boolean
    If CheckDirection(row, column, 1, 0) >= 4 Or _
       CheckDirection(row, column, 0, 1) >= 4 Or _
       CheckDirection(row, column, 1, 1) >= 4 Or _
       CheckDirection(row, column, 1, -1) >= 4 Then
        CheckForWin = True
    Else
        CheckForWin = False
    End If
End Function

Function CheckDirection(row As Integer, column As Integer, deltaRow As Integer, deltaColumn As Integer) As Integer
    Dim count As Integer, r As Integer, c As Integer
    count = 1
    r = row + deltaRow
    c = column + deltaColumn
    
    ' Forward direction
    Do While r >= 1 And r <= 8 And c >= 1 And c <= 8
        If board(r, c) = board(row, column) Then
            count = count + 1
        Else
            Exit Do
        End If
        r = r + deltaRow
        c = c + deltaColumn
    Loop
    
    r = row - deltaRow
    c = column - deltaColumn
    
    ' Backward direction
    Do While r >= 1 And r <= 8 And c >= 1 And c <= 8
        If board(r, c) = board(row, column) Then
            count = count + 1
        Else
            Exit Do
        End If
        r = r - deltaRow
        c = c - deltaColumn
    Loop
    
    CheckDirection = count
End Function

Function IsBoardFull() As Boolean
    Dim i As Integer, j As Integer
    For i = 1 To 8
        For j = 1 To 8
            If board(i, j) = "" Then
                IsBoardFull = False
                Exit Function
            End If
        Next j
    Next i
    IsBoardFull = True
End Function

Sub DropDiscInColumn1()
    DropDisc 1
End Sub

Sub DropDiscInColumn2()
    DropDisc 2
End Sub

Sub DropDiscInColumn3()
    DropDisc 3
End Sub

Sub DropDiscInColumn4()
    DropDisc 4
End Sub

Sub DropDiscInColumn5()
    DropDisc 5
End Sub

Sub DropDiscInColumn6()
    DropDisc 6
End Sub

Sub DropDiscInColumn7()
    DropDisc 7
End Sub

Sub DropDiscInColumn8()
    DropDisc 8
End Sub

Sub BotMove(difficulty As Integer)
    Dim column As Integer
    Dim bestMove As Integer
    Dim randomChance As Single
    Dim botRow As Integer
    
    randomChance = Rnd() ' Generates a random number between 0 and 1
    bestMove = DetermineBestMove()
    
    If randomChance <= difficulty * 0.1 Then
        ' Perform the best move
        column = bestMove
    Else
        ' Perform a random valid move
        Do
            column = Int(Rnd() * 8) + 1
        Loop Until IsValidMove(column)
    End If
    
    botRow = GetEmptyRow(column)
    board(botRow, column) = currentPlayer
    With Cells(botRow + 1, column)
        .Interior.Color = RGB(255, 255, 0) ' Yellow
    End With
    
    If CheckForWin(botRow, column) Then
        MsgBox "Player " & board(botRow, column) & " wins!"
        InitializeGame
    ElseIf IsBoardFull Then
        MsgBox "It's a draw!"
        InitializeGame
    Else
        currentPlayer = "R"
    End If
End Sub

Function MakeMove(column As Integer) As Boolean
    Dim row As Integer
    row = GetEmptyRow(column)
    If row = 0 Then
        MakeMove = False
    Else
        board(row, column) = currentPlayer
        With Cells(row + 1, column)
            If currentPlayer = "R" Then
                .Interior.Color = RGB(255, 0, 0) ' Red
            Else
                .Interior.Color = RGB(255, 255, 0) ' Yellow
            End If
        End With
        MakeMove = True
    End If
End Function

Function DetermineBestMove() As Integer
    Dim column As Integer
    
    ' Check if the bot can win with one move
    For column = 1 To 8
        If IsValidMove(column) Then
            If IsWinningMove(column, currentPlayer) Then
                DetermineBestMove = column
                Exit Function
            End If
        End If
    Next column
    
    ' Check if the opponent can win with one move and block it
    For column = 1 To 8
        If IsValidMove(column) Then
            If IsWinningMove(column, IIf(currentPlayer = "R", "Y", "R")) Then
                DetermineBestMove = column
                Exit Function
            End If
        End If
    Next column
    
    ' Fallback: Choose the first valid move
    For column = 1 To 8
        If IsValidMove(column) Then
            DetermineBestMove = column
            Exit Function
        End If
    Next column
End Function

Function IsValidMove(column As Integer) As Boolean
    ' Check if the top cell in the column is empty
    IsValidMove = (board(1, column) = "")
End Function

Function IsWinningMove(column As Integer, player As String) As Boolean
    Dim row As Integer
    Dim tempBoard(1 To 8, 1 To 8) As String
    Dim i As Integer, j As Integer
    
    ' Copy the current board to a temporary board
    For i = 1 To 8
        For j = 1 To 8
            tempBoard(i, j) = board(i, j)
        Next j
    Next i
    
    ' Find the first empty row in the column
    For row = 8 To 1 Step -1
        If tempBoard(row, column) = "" Then
            tempBoard(row, column) = player
            Exit For
        End If
    Next row
    
    ' Check if this move wins the game
    IsWinningMove = CheckWinForPlayer(tempBoard, player)
End Function

Function CheckWinForPlayer(tempBoard() As String, player As String) As Boolean
    Dim row As Integer, col As Integer
    Dim i As Integer

    ' Check horizontal
    For row = 1 To 8
        For col = 1 To 5
            If tempBoard(row, col) = player And tempBoard(row, col + 1) = player And _
               tempBoard(row, col + 2) = player And tempBoard(row, col + 3) = player Then
                CheckWinForPlayer = True
                Exit Function
            End If
        Next col
    Next row

    ' Check vertical
    For col = 1 To 8
        For row = 1 To 5
            If tempBoard(row, col) = player And tempBoard(row + 1, col) = player And _
               tempBoard(row + 2, col) = player And tempBoard(row + 3, col) = player Then
                CheckWinForPlayer = True
                Exit Function
            End If
        Next row
    Next col

    ' Check diagonal (\)
    For row = 1 To 5
        For col = 1 To 5
            If tempBoard(row, col) = player And tempBoard(row + 1, col + 1) = player And _
               tempBoard(row + 2, col + 2) = player And tempBoard(row + 3, col + 3) = player Then
                CheckWinForPlayer = True
                Exit Function
            End If
        Next col
    Next row

    ' Check diagonal (/)
    For row = 4 To 8
        For col = 1 To 5
            If tempBoard(row, col) = player And tempBoard(row - 1, col + 1) = player And _
               tempBoard(row - 2, col + 2) = player And tempBoard(row - 3, col + 3) = player Then
                CheckWinForPlayer = True
                Exit Function
            End If
        Next col
    Next row

    CheckWinForPlayer = False
End Function



